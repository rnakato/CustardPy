FROM rnakato/ubuntu_gpu_20.04:cuda11.0.3-cudnn8 AS base
LABEL maintainer="Ryuichiro Nakato <rnakato@iqb.u-tokyo.ac.jp>"

# For sorting, LC_ALL is C
ENV LC_ALL=C
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=all

WORKDIR /opt/
USER root

SHELL ["/bin/bash", "-c"]

RUN apt-get update \
    && apt-get install -y --no-install-recommends \
    apt-utils \
    automake \
    bc \
    build-essential \
    bzip2 \
    default-jdk \
    clang \
    cmake \
    curl \
    fastqc \
    ffmpeg \
    gawk \
    gcc \
    git \
    gpg-agent \
    imagemagick \
    less \
    libbz2-dev \
    libclang-dev \
    libcurl4-gnutls-dev \
    libfontconfig1-dev \
    libfribidi-dev \
    libgit2-dev \
    libglpk-dev \
    libharfbuzz-dev \
    liblz4-tool \
    libncurses-dev \
    libncurses5 \
    libssl-dev \
    libxkbcommon-x11-0 \
    libxcb-icccm4 \
    libxcb-image0 \
    libxcb-keysyms1 \
    libxcb-render-util0 \
    libxkbcommon-x11-0 \
    libxml2-dev \
    libz-dev \
    locales \
    make \
    pigz \
    qtcreator \
    unzip \
    zlib1g-dev \
    && echo "deb https://cran.rstudio.com/bin/linux/ubuntu focal-cran40/" | tee -a /etc/apt/sources.list \
    && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 51716619E084DAB9\
    && apt-get update \
    && apt-get install -y --no-install-recommends r-base r-base-core r-recommended r-base-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# BWA version 0.7.17
COPY bwa-0.7.17.tar.bz2 bwa-0.7.17.tar.bz2
RUN tar xvfj bwa-0.7.17.tar.bz2 \
    && cd bwa-0.7.17 \
    && make \
    && cd .. \
    && rm bwa-0.7.17.tar.bz2

# Chromap 0.2.6
COPY chromap-0.2.6_x64-linux.tar.bz2 chromap-0.2.6_x64-linux.tar.bz2
RUN tar xvfj chromap-0.2.6_x64-linux.tar.bz2 \
    && rm chromap-0.2.6_x64-linux.tar.bz2

# Bowtie2.4.5
COPY bowtie2-2.4.5-linux-x86_64.zip bowtie2-2.4.5-linux-x86_64.zip
RUN unzip bowtie2-2.4.5-linux-x86_64.zip \
    && rm bowtie2-2.4.5-linux-x86_64.zip

# pairsqc
RUN wget --progress=dot:giga https://github.com/4dn-dcic/pairsqc/archive/0.2.3.tar.gz \
    && tar -xzf 0.2.3.tar.gz \
    && rm 0.2.3.tar.gz \
    && ln -s /opt/pairsqc-*/ /opt/pairsqc

# R packages
ENV Ncpus=16
# CALDER2: https://github.com/CSOgroup/CALDER2
RUN R -e "install.packages(c('BiocManager'))" \
    && R -e "BiocManager::install(ask = FALSE)" \
    && R CMD javareconf \
    && R -e "install.packages(c('data.table', \
                                'devtools', \
                                'dplyr', \
                                'fdrtool', \
                                'ggplot2', \
                                'ggpubr', \
                                'ggsci', \
                                'hash', \
                                'Nozzle.R1', \
                                'optparse', \
                                'parallel', \
                                'plyr', \
                                'Rcpp', \
                                'reshape2', \
                                'sm', \
                                'splines', \
                                'strawr', \
                                'stringr', \
                                'tools', \
                                'tidyr', \
                                'tidyverse'))" \
    && R -e "BiocManager::install(c('BiocGenerics', \
                                    'Biostrings', \
                                    'edgeR', \
                                    'GenomeInfoDb', \
                                    'GenomicAlignments', \
                                    'GenomicRanges', \
                                    'hicrep', \
                                    'IRanges', \
                                    'matrixStats', \
                                    'rhdf5', \
                                    'S4Vectors', \
                                    'ShortRead'))" \
    && R -e 'devtools::install_url("https://github.com/SooLee/plotosaurus/archive/0.9.2.zip")' \
    && R -e 'remotes::install_github(c("robinweide/GENOVA", "yycunc/FIREcaller", "CSOgroup/CALDER2.0"))' \
    && R -e 'devtools::install_bitbucket("chicagoTeam/Chicago", subdir="Chicago")' \
    && R -e 'devtools::install_bitbucket("chicagoTeam/Chicago", subdir="PCHiCdata")'

COPY hicrep_1.12.2.tar.gz hicrep_1.12.2.tar.gz
RUN R -e 'install.packages("/opt/hicrep_1.12.2.tar.gz", repo = NULL, type = "source")' \
    && rm hicrep_1.12.2.tar.gz

# BEDtools
ENV v=2.31.0
COPY bedtools-$v.tar.gz bedtools-$v.tar.gz
RUN tar zxvf bedtools-$v.tar.gz \
    && cd bedtools2 && make \
    && rm /opt/bedtools-$v.tar.gz

# micromamba
ENV MAMBA_ROOT_PREFIX=/opt/micromamba
ENV PATH=$PATH:/opt/micromamba/bin
COPY micromamba /opt/micromamba
RUN micromamba install -y -n base -f /opt/micromamba/env.yaml \
    # JuiceBox
    && micromamba run -n base pip install --no-cache-dir git+https://github.com/igvteam/juicebox-notebook.git \
    # pastis
    # iced installation tips: https://github.com/scikit-learn/scikit-learn/discussions/21931
    # about "No module named 'numpy.distutils._msvccompiler' in numpy.distutil"
    && micromamba run -n base pip install --no-cache-dir --no-build-isolation iced==0.5.10 \
       && micromamba run -n base pip install --no-cache-dir pastis==0.4.0 \
    && micromamba clean --all --yes

# stripenn (pandas==1.5.3)
RUN micromamba create -n stripenn python==3.8 -c defaults \
   && micromamba run -n stripenn pip install --no-cache-dir stripenn==1.1.65.22 \
   && micromamba clean --all --yes

# 3DChromatin_ReplicateQC v1.0.1
COPY 3DChromatin_ReplicateQC.v1.0.1.modified.tar.gz 3DChromatin_ReplicateQC.v1.0.1.tar.gz
RUN micromamba create -n ReplicateQC python==2.7.18 scikit-learn psutil -c defaults \
    && tar zxvf 3DChromatin_ReplicateQC.v1.0.1.tar.gz \
    && mv 3DChromatin_ReplicateQC-1.0.1 3DChromatin_ReplicateQC \
    && micromamba run -n ReplicateQC 3DChromatin_ReplicateQC/install_scripts/install_3DChromatin_ReplicateQC.sh \
    && rm 3DChromatin_ReplicateQC.v1.0.1.tar.gz \
    && micromamba clean --all --yes

# HiCUP
COPY HiCUP-0.9.2.tar.gz HiCUP-0.9.2.tar.gz
RUN tar zxvf HiCUP-0.9.2.tar.gz \
    && rm HiCUP-0.9.2.tar.gz

# HiC-Pro
# (remove R to use local R)
COPY HiC-Pro_3.1.0.tar.gz HiC-Pro_3.1.0.tar.gz
RUN tar zxvf HiC-Pro_3.1.0.tar.gz \
    && micromamba create -n hic-pro -f HiC-Pro-3.1.0/environment.yml \
    && cd HiC-Pro-3.1.0 \
    && micromamba run -n hic-pro make configure \
    && micromamba run -n hic-pro make install \
    && micromamba remove -n hic-pro r-base r-ggplot2 r-rcolorbrewer r-gridbase \
    && rm -rf /opt/HiC-Pro-3.1.0 /opt/HiC-Pro_3.1.0.tar.gz

# FitHiChIP
RUN git clone https://github.com/ay-lab/FitHiChIP.git \
    && micromamba run -n hic-pro pip install --no-cache-dir networkx==3.1 numpy==1.22.* hic-straw==1.3.1 cooler==0.9.3 macs2==2.2.9.1
COPY scripts_Docker/bedToBigBed /opt/FitHiChIP/bedToBigBed
COPY scripts_Docker/interact.as /opt/FitHiChIP/interact.as

# Mango (modified version by Wang)
RUN git clone https://github.com/wangjk321/mango_multithreads_wang.git \
    && mv mango_multithreads_wang mango \
    && R CMD INSTALL --no-multiarch --with-keep.source mango
# ChIAPoP
COPY ChIAPoP_0.99.9.7.tar.gz ChIAPoP_0.99.9.7.tar.gz
RUN R CMD INSTALL ChIAPoP_0.99.9.7.tar.gz \
    && rm ChIAPoP_0.99.9.7.tar.gz

# Hi-C Simulation (FreeHiC)
#RUN git clone https://github.com/yezhengSTAT/FreeHiC \
#    && cd FreeHiC \
#    && pip install -r python-requirements.txt

# hictk
RUN micromamba create -n hictk -c defaults -c conda-forge -c bioconda hictk==2.1.2

## Cooler restriction sites
RUN wget --quiet https://x.gd/qH1Lw -O Cooler-restriction_sites.tar.gz \
    && tar zxvf Cooler-restriction_sites.tar.gz \
    && mv Cooler-restriction_sites / \
    && rm Cooler-restriction_sites.tar.gz

# Juicer v1.6 and Juicer tools v1.22.01
COPY juicer-1.6 /opt/juicer
COPY juicer_tools.1.22.01.jar /opt/juicer/scripts/common/juicer_tools.jar
COPY juicer_tools.1.9.9_jcuda.0.8.jar /opt/juicer/juicer_tools.1.9.9_jcuda.0.8.jar
RUN wget --quiet https://x.gd/5ND8F -O restriction_sites.tar.gz \
    && tar zxvf restriction_sites.tar.gz \
    && mv restriction_sites /opt/juicer/ \
    && rm restriction_sites.tar.gz

COPY motiffiles motiffiles
RUN unpigz /opt/motiffiles/*gz
COPY Juicebox.jar /opt/Juicebox.jar

# Final settings
COPY scripts_juicer /opt/scripts_juicer
COPY scripts_custardPy /opt/scripts_custardPy
RUN chmod +x scripts*/* /opt/juicer/scripts/common/* /opt/juicer/scripts/* /opt/scripts_custardPy/pastis/*
RUN ln -s /opt/micromamba/pkgs/pairix-0.3.8-py310*/bin /opt/pairix

RUN gcc -Wall /opt/scripts_juicer/Juicer_statistics.c -o /opt/scripts_juicer/Juicer_statistics -lz -O3 \
    && gcc -Wall /opt/scripts_juicer/Juicer_remove_duplicate.c -o /opt/scripts_juicer/Juicer_remove_duplicate -lz -O3 \
    && gcc -Wall /opt/scripts_juicer/Juicer_fragment.c -o /opt/scripts_juicer/Juicer_fragment -lz -O3 \
    && gcc -Wall /opt/scripts_juicer/Juicer_chimeric_blacklist.c -o /opt/scripts_juicer/Juicer_chimeric_blacklist -lz -O3 \
    && gcc -Wall /opt/scripts_juicer/distance_vs_count.Juicer.c -o /opt/scripts_juicer/distance_vs_count.Juicer -lz -O3 \
    && gcc -Wall /opt/scripts_juicer/distance_vs_count.Juicer.log.c -o /opt/scripts_juicer/distance_vs_count.Juicer.log -lz -O3 -lm

FROM rnakato/ubuntu_gpu_20.04:cuda11.0.3-cudnn8
COPY --from=base / /
COPY --from=rnakato/homer:20.04 /opt/HOMER /opt/HOMER
LABEL maintainer "Ryuichiro Nakato <rnakato@iqb.u-tokyo.ac.jp>"

SHELL ["/bin/bash", "-c"]
USER root
# GAWK has the 'and' function, needed for chimeric_blacklist
RUN echo 'alias awk=gawk' >> ~/.bashrc
# Need to be sure we have this for stats
RUN locale-gen en_US.UTF-8

ENV LC_ALL=C
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=all
ENV PATH=$PATH:/opt:/opt/scripts:/opt/scripts_custardPy:/opt/scripts_juicer:/opt/micromamba/bin:/usr/local/bin/HiC-Pro_3.1.0/bin
ENV PATH=$PATH:/opt/bwa-0.7.17:/opt/juicer/scripts:/opt/juicer/scripts/common
ENV PATH=$PATH:/opt/bowtie2-2.4.5-linux-x86_64:/opt/bedtools2/bin:/opt/scripts_custardPy/pastis:/opt/pairix:/opt/pairsqc:/opt/HOMER/bin/:/opt/HiCUP-0.9.2

COPY scripts_Docker/run_env.sh /opt/scripts/run_env.sh
COPY scripts_Docker/run_fithic.sh /opt/scripts/run_fithic.sh
RUN chmod +x /opt/scripts/run_env.sh /opt/scripts/run_fithic.sh

# Error "Qt: Failed to create XKB context!"
# https://stackoverflow.com/questions/26974644/no-keyboard-input-in-qt-creator-after-update-to-qt5
ENV QT_XKB_CONFIG_ROOT=/usr/share/X11/xkb
#RUN qtcreator
ENV XDG_RUNTIME_DIR=/tmp/.xdg

RUN mkdir -p /.singularity.d
COPY scripts_Docker/runscript /.singularity.d/runscript
COPY scripts_Docker/entrypoint.sh /entrypoint.sh
RUN chmod 777 /entrypoint.sh /.singularity.d/runscript
COPY localbin/hictk /usr/local/bin/
RUN chmod +x /usr/local/bin/hictk

RUN micromamba clean --all --yes


ENV MAMBA_ROOT_PREFIX=/opt/micromamba

USER ubuntu
WORKDIR /home/ubuntu

ENTRYPOINT ["/entrypoint.sh"]
CMD ["/bin/bash"]
